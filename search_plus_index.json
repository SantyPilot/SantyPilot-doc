{"./":{"url":"./","title":"简介","keywords":"","body":"SantyPilot 是什么 SantyPilot是一个开源飞控项目，前身是LibrePilotSantyPilot聚焦于教学与科研领域，专注于固定翼与多旋翼性能调优与算法验证通过轻量模块化的框架，和配套的开发规范，方便新手快速上手 SantyPilot 官方文档 官方文档链接本项目为SantyPilot官方文档，您可以自由更新其中内容如果您在环境配置，开发，使用过程中遇到任何问题可以到代码仓issue页面将问题描述清楚，附上报错截图，提交给我们搭建本地gitbook开发环境 node -v v14.17.0 npm -v 6.14.13 npm install gitbook 您可以按照如下方法构建与更新SantyPilot文档 git clone git@github.com:SantyPilot/SantyPilot-doc.git cd SantyPilot-doc # do some modification gitbook build # build .md files gitbook serve # preview on localhost:4000 git add ./ git commit -m \"ADD NEW FEATURE\" git push origin $YOUR_BRANCH # make a push mkdir ../temp # make a temp dir cp -rf ./_book/* ../temp # cp page files into temp git checkout $YOUR_PAGE_BRANCH # check into your develop branch cp -rf ../temp/* . git add ./ git commit -m \"UPDATE PAGE FILES\" git push origin $YOUR_PAGE_BRANCH # make another push # then make two PR: one $YOUR_BRANCH->dev # the other $YOUR_PAGE_BRANCH->gh-pages 如果遇到如下报错 Installing GitBook 3.2.2 /usr/local/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287 if (cb) cb.apply(this, arguments) 您可以编辑报错文件把报错跳过去 vim /usr/local/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js 注释掉 62 //fs.stat = statFix(fs.stat) 63 //fs.fstat = statFix(fs.stat) 64 //fs.lstat = statFix(fs.stat) SantyPilot 生态推广 欢迎关注我们的公众号，了解前沿咨询，构建无人机全栈开发能力 如果您有任何科研教学上的合作或需求，可以发邮件联系我（小新） 邮箱：Xiaosanti@gmail.com 963786615@qq.com QQ:963786615 Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2024-01-01 11:24:43 "},"project/development.html":{"url":"project/development.html","title":"开发环境搭建","keywords":"","body":"Linux（推荐） 环境要求 实际版本可有不同，欢迎补充 lsb_release -a stributor ID: Ubuntu Description: Ubuntu 16.04.6 LTS Release: 16.04 Codename: xenial 下载三方库与构建工具链 添加工具仓，借用librepilot的PPA（Personal Package Archive）仓库 sudo add-apt-repository ppa:librepilot/tools -y sudo apt-get update -q 下载构建工具与三方库 sudo apt-get install build-essential curl ccache debhelper git-core git-doc flex graphviz bison libudev-dev libusb-1.0-0-dev libsdl1.2-dev python libopenscenegraph-dev qt5-default qttools5-dev-tools libqt5svg5-dev qtdeclarative5-dev qml-module-qtquick-controls libqt5serialport5-dev qtmultimedia5-dev qtscript5-dev libqt5opengl5-dev qml-module-qtquick-controls qml-module-qtquick-dialogs qml-module-qtquick-xmllistmodel qml-module-qtquick-localstorage qml-module-qtquick-particles2 qml-module-qtquick-window2 qml-module-qtquick2 libosgearth-dev openscenegraph-plugin-osgearth 下载SantyPilot代码并下载其他工具链 git clone -b dev git@github.com:SantyPilot/SantyPilot.git cd SantyPilot make arm_sdk_install # arm cross toolchain make qt_sdk_install # qt 5.9.0 make gtest_install # unit-test make ccache_install # speed up compile QT安装包文件较大，下载可能较慢，先放在github上了，按需取用将安装包qt_opensource-linux-x64-5.9.0.run下载到download目录下执行如下命令安装 sudo chmod +x qt-opensource-linux-x64-5.9.0.run ./qt-opensource-linux-x64-5.9.0.run --script SantyPilot/make/tool_install/qt-install.qs 构建 在第一次配置本地环境，推荐全部代码构建，时间较长请耐心等待 make all 如果UAVObject（SantyPilot内部通讯机制）配置有更新，需要重新构建UABObject对象， 或地面站源码有修改，推荐使用如下构建命令增量更新 make all_ground 如果飞控代码有更新，需要构建固件，语法为make type_boardname 如构建revolution板的bootloader, firmware软件 make bl_revolution make fw_revolution 或ef(entire flash = bl + fw)全flash固件（推荐） make ef_revolution 也可以全部构建 make revolution 烧录 推荐您使用如下命令安装st-flash，st-info工具 make stm32flash_install 并添加SantyPilot/tools/stm32flash/build 环境变量方便使用推荐使用st-flash，把整个固件（entire flash）烧录到STM32F4 flash程序起始地址 st-flash --reset write build/firmware/ef_revolution/ef_revolution.bin 0x08000000 为了方便，您可以用alias简化命令行 alias flash_image='st-flash --reset write build/firmware/ef_revolution/ef_revolution.bin 0x08000000' 于是，flash_image可以代指整个命令 调试 调试原理： openocd与STLink-STM32直接连接，解析并处理telnet客户端发来的指令（如reset, start, halt等）同时openocd作为gdb-server处理gdb调试指令（如break, watch等）您可以在根目录下执行下面命令，本地下载解压openocd make openocd_install 此时openocd可执行文件解压缩到tools文件夹下，您可配置环境变量或使用alias简化命令行操作，参考上文 确认openocd可用 openocd -v Open On-Chip Debugger 0.9.0 (2018-01-24-01:05) Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html 用STLinkV2设备连接飞控SWD口，另一端连接到PC USB端口 用st-info检查连接状态,运行 st-info --probe 可以返回设备连接信息，说明系统连接状态正常 启动OpenOCD openocd -f SantyPilot/flight/Project/OpenOCD/stlink.cfg -f SantyPilot/flight/Project/OpenOCD/stm32f4x.cfg Open On-Chip Debugger 0.11.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html WARNING: interface/stlink-v2-1.cfg is deprecated, please switch to interface/stlink.cfg Info : auto-selecting first available session transport \"hla_swd\". To override use 'transport select '. Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD Info : Listening on port 6666 for tcl connections Info : Listening on port 4444 for telnet connections Info : clock speed 2000 kHz Info : STLINK V2J37M27 (API v2) VID:PID 0483:374B Info : Target voltage: 3.240865 Info : stm32g0x.cpu: hardware has 4 breakpoints, 2 watchpoints Info : starting gdb server for stm32g0x.cpu on 3333 Info : Listening on port 3333 for gdb connections 新打开一个telnet客户端，用来发送基本指令并在telnet状态下，和openocd建立连接 telnet telnet> o localhost 4444 启动gdb，并在gdb状态下和gdb-server(openocd)连接 arm-none-eabi-gdb /home/santy/source/LibrePilot/build/firmware/fw_revolution/fw_revolution.elf gdb> target remote: 3333 至此，您可以使用gdb自由调试您的程序~ Windows 环境要求 Win7,Win8,Win10 下载三方库与构建工具链 您可以在链接下载i686（32bit）或x86_64（64bit）MSYS2，并安装其中包含了GNU构建工具链，必要的命令行工具，以及pacman包管理系统 打开MSYS2终端工具，添加pacman三方库地址，这里使用librepilot提供的pacman地址 echo \"[librepilot-mingw]\" >> /etc/pacman.conf echo \"SigLevel = Optional TrustAll\" >> /etc/pacman.conf echo \"Server = http://download.librepilot.org/repo/mingw\" >> /etc/pacman.conf 可以打开地址http://download.librepilot.org/repo/mingw查看其中的包文件然后打开MINGW32终端，更新配置并下载所需三方库，其中--needed表示若有新版，不更新覆盖本地旧版本 pacman -Sy pacman -S --needed git unzip tar pacman -S --needed mingw-w64-i686-toolchain pacman -S --needed mingw-w64-i686-ccache pacman -S --needed mingw-w64-i686-ntldd pacman -S --needed mingw-w64-i686-qt5 pacman -S --needed mingw-w64-i686-SDL pacman -S --needed mingw-w64-i686-mesa pacman -S --needed mingw-w64-i686-openssl pacman -S --needed mingw-w64-i686-gdal-minimal pacman -S --needed mingw-w64-i686-OpenSceneGraph pacman -S --needed mingw-w64-i686-osgearth pacman -S --needed mingw-w64-i686-graphite2 pacman -S --needed mingw-w64-i686-nghttp2 pacman -S --needed mingw-w64-i686-gst-plugins-base pacman -S --needed mingw-w64-i686-gst-plugins-good pacman -S --needed mingw-w64-i686-gst-plugins-bad pacman -S --needed mingw-w64-i686-gst-plugins-ugly pacman -S --needed mingw-w64-i686-gst-libav pacman -S --needed mingw-w64-i686-OpenSceneGraph-debug pacman -S --needed mingw-w64-i686-osgearth-debug 或是MINGW64终端 pacman -Sy pacman -S --needed git unzip tar pacman -S --needed mingw-w64-x86_64-toolchain pacman -S --needed mingw-w64-x86_64-ccache pacman -S --needed mingw-w64-x86_64-ntldd pacman -S --needed mingw-w64-x86_64-qt5 pacman -S --needed mingw-w64-x86_64-SDL pacman -S --needed mingw-w64-x86_64-mesa pacman -S --needed mingw-w64-x86_64-openssl pacman -S --needed mingw-w64-x86_64-gdal-minimal pacman -S --needed mingw-w64-x86_64-OpenSceneGraph pacman -S --needed mingw-w64-x86_64-osgearth pacman -S --needed mingw-w64-x86_64-gst-plugins-base pacman -S --needed mingw-w64-x86_64-gst-plugins-good pacman -S --needed mingw-w64-x86_64-gst-plugins-bad pacman -S --needed mingw-w64-x86_64-gst-plugins-ugly pacman -S --needed mingw-w64-x86_64-gst-libav pacman -S --needed mingw-w64-x86_64-OpenSceneGraph-debug pacman -S --needed mingw-w64-x86_64-osgearth-debug 下载代码并下载工具链 git clone -b dev git@github.com:SantyPilot/SantyPilot.git cd SantyPilot make arm_sdk_install # arm cross toolchain make qt_sdk_install # qt 5.9.0 make gtest_install # unit-test make ccache_install # speed up compile 遇到QT下载慢的问题，可以参考Linux的解决办法，不赘述 构建 构建命令与Linux相同，可参考上文，此处不赘述 烧录 烧录可以使用st-utility UI版本烧录工具，将ef_revolution.bin烧录到0x08000000地址这里和Linux的烧录方法本质相同，不赘述 调试 调试方案也是采用STLink硬件 + OpenOCD + GDB的方式需要说的是，微软推出Windows Terminal，可以获得和Linux一样的操作体验如果您更喜欢IDE方式，可以使用VSCode + json配置文件方式改进调试体验 开发规范 希望您遵守如下开发规范 开发流程 您Fork一份到本人仓库，单一功能开发或BUG修复完成后，先提交到本人仓库，再提交Push Request(PR)到SantyPilot主仓英文说明功能，场景，最好附上自测截图，团队内开发review代码后合入优秀代码合入将会收到红包奖励 编码规范 希望您使用英文注释，简单说清含义即可 另外，推荐您遵守Google Code Style Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2024-01-01 12:08:00 "},"basics/installation.html":{"url":"basics/installation.html","title":"驱动","keywords":"","body":"GitBook 安装 目录 localinstall 环境要求 安装 GitBook 是很简单的。您的系统只需要满足这两个要求： NodeJS（推荐使用v4.0.0及以上版本） Windows，Linux，Unix 或 Mac OS X 通过NPM安装 安装 GitBook 的最好办法是通过 NPM。在终端提示符下，只需运行以下命令即可安装 GitBook： $ npm install gitbook-cli -g gitbook-cli 是 GitBook 的一个命令行工具。它将自动安装所需版本的 GitBook 来构建一本书。 执行下面的命令，查看 GitBook 版本，以验证安装成功。 $ gitbook -V 安装历史版本 gitbook-cli 可以轻松下载并安装其他版本的GitBook来测试您的书籍： $ gitbook fetch beta 使用 gitbook ls-remote 会列举可以下载的版本。 创建一本书 初始化 GitBook可以设置一个样板书： $ gitbook init 如果您希望将书籍创建到一个新目录中，可以通过运行 gitbook init ./directory 这样做。 build 使用下面的命令，会在项目的目录下生成一个 _book 目录，里面的内容为静态站点的资源文件： $ gitbook build Debugging 您可以使用选项 --log=debug 和 --debug 来获取更好的错误消息（使用堆栈跟踪）。例如： $ gitbook build ./ --log=debug --debug 启动服务 使用下列命令会运行一个 web 服务, 通过 http://localhost:4000/ 可以预览书籍 $ gitbook serve Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 22:57:02 "},"basics/commands.html":{"url":"basics/commands.html","title":"滤波","keywords":"","body":"GitBook 命令 这里主要介绍一下 GitBook 的命令行工具 gitbook-cli 的一些命令, 首先说明两点: gitbook-cli 和 gitbook 是两个软件 gitbook-cli 会将下载的 gitbook 的不同版本放到 ~/.gitbook中, 可以通过设置GITBOOK_DIR环境变量来指定另外的文件夹 列出 gitbook 所有的命令 gitbook help 输出 gitbook-cli 的帮助信息 gitbook --help 生成静态网页 gitbook build 生成静态网页并运行服务器 gitbook serve 生成时指定gitbook的版本, 本地没有会先下载 gitbook build --gitbook=2.0.1 列出本地所有的gitbook版本 gitbook ls 列出远程可用的gitbook版本 gitbook ls-remote 安装对应的gitbook版本 gitbook fetch 标签/版本号 更新到gitbook的最新版本 gitbook update 卸载对应的gitbook版本 gitbook uninstall 2.0.1 指定log的级别 gitbook build --log=debug 输出错误信息 gitbook builid --debug Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 11:16:33 "},"basics/structure.html":{"url":"basics/structure.html","title":"控制","keywords":"","body":"Gitbook 目录结构 目录 GitBook 项目结构 GitBook使用简单的目录结构。在 SUMMARY （即 SUMMARY.md 文件）中列出的所有 Markdown / Asciidoc 文件将被转换为 HTML。多语言书籍结构略有不同。 一个基本的 GitBook 电子书结构通常如下： . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md GitBook 特殊文件的功能： 文件 描述 book.json 配置数据 (optional) README.md 电子书的前言或简介 (required) SUMMARY.md 电子书目录 (optional) GLOSSARY.md 词汇/注释术语列表 (optional) 静态文件和图片 静态文件是在 SUMMARY.md 中未列出的文件。除非被忽略，否则所有静态文件都将复制到输出路径。 忽略文件和文件夹 GitBook将读取 .gitignore，.bookignore 和 .ignore 文件，以获取要过滤的文件和文件夹。这些文件中的格式遵循 .gitignore 的规则： # This is a comment # Ignore the file test.md test.md # Ignore everything in the directory \"bin\" bin/* 项目与子目录集成 对于软件项目，您可以使用子目录（如 docs/ ）来存储项目文档的图书。您可以配置根选项来指示 GitBook 可以找到该图书文件的文件夹： . ├── book.json └── docs/ ├── README.md └── SUMMARY.md 在 book.json 中配置以下内容： { \"root\": \"./docs\" } Summary GitBook 使用 SUMMARY.md 文件来定义本书的章节和子章节的结构。 SUMMARY.md 文件用于生成本书的目录。 SUMMARY.md 的格式是一个链接列表。链接的标题将作为章节的标题，链接的目标是该章节文件的路径。 向父章节添加嵌套列表将创建子章节。 简单示例： # Summary * [Part I](part1/README.md) * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) * [Part II](part2/README.md) * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) 每章都有一个专用页面（part#/README.md），并分为子章节。 锚点 目录中的章节可以使用锚点指向文件的特定部分。 # Summary ### Part I * [Part I](part1/README.md) * [Writing is nice](part1/README.md#writing) * [GitBook is nice](part1/README.md#gitbook) * [Part II](part2/README.md) * [We love feedback](part2/README.md#feedback) * [Better tools for authors](part2/README.md#tools) 部分 目录可以分为以标题或水平线 ---- 分隔的部分： # Summary ### Part I * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) ### Part II * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) ---- * [Last part without title](part3/title.md) Parts 只是章节组，没有专用页面，但根据主题，它将在导航中显示。 页面 Markdown 语法 默认情况下，GitBook 的大多数文件都使用 Markdown 语法。 GitBook 推荐使用这种语法。所使用的语法类似于 GitHub Flavored Markdown syntax 。 此外，你还可以选择 AsciiDoc 语法。 页面内容示例： # Title of the chapter This is a great introduction. ## Section 1 Markdown will dictates _most_ of your **book's structure** ## Section 2 ... 页面前言 页面可以包含一个可选的前言。它可以用于定义页面的描述。前面的事情必须是文件中的第一件事，必须采取在三虚线之间设置的有效YAML的形式。这是一个基本的例子： --- description: This is a short description of my page --- # The content of my page ... Glossary 允许您指定要显示为注释的术语及其各自的定义。根据这些术语，GitBook 将自动构建索引并突出显示这些术语。 GLOSSARY.md 的格式是 h2 标题的列表，以及描述段落： ## Term Definition for this term ## Another term With it's definition, this can contain bold text and all other kinds of inline markup ... Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 11:16:33 "},"basics/settings.html":{"url":"basics/settings.html","title":"指令","keywords":"","body":"Gitbook 配置 GitBook 允许您使用灵活的配置自定义您的电子书。 这些选项在 book.json 文件中指定。对于不熟悉 JSON 语法的作者，您可以使用 JSONlint 等工具验证语法。 目录 常规设置 变量 描述 root 包含所有图书文件的根文件夹的路径，除了 book.json structure 指定自述文件，摘要，词汇表等的路径，参考 Structure paragraph. title 您的书名，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预填的。 description 您的书籍的描述，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预填的。 author 作者名。在GitBook.com上，这个字段是预填的。 isbn 国际标准书号 ISBN language 本书的语言类型 —— ISO code 。默认值是 en direction 文本阅读顺序。可以是 rtl （从右向左）或 ltr （从左向右），默认值依赖于 language 的值。 gitbook 应该使用的GitBook版本。使用 SemVer 规范，并接受类似于 “> = 3.0.0” 的条件。 author 作者姓名，在GitBook.com上，这个字段是预先填写的。 例： \"author\" : \"Zhang Peng\" description 电子书的描述，默认值是从 README 中提取出来的。在GitBook.com上，这个字段是预先填写的。 例： \"description\" : \"Gitbook 教程\" direction 文本的方向。可以是 rtl 或 ltr，默认值取决于语言的值。 例： \"direction\" : \"ltr\" gitbook 应该使用的GitBook版本。使用SemVer规范，接受类似于 >=3.0.0 的条件。 例： \"gitbook\" : \"3.0.0\", \"gitbook\" : \">=3.0.0\" language Gitbook使用的语言, 版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 例： \"language\" : \"zh-hans\", links 在左侧导航栏添加链接信息 例： \"links\" : { \"sidebar\" : { \"Home\" : \"https://github.com/dunwu/gitbook-templates\" } } root 包含所有图书文件的根文件夹的路径， book.json 文件除外。 例： \"root\" : \"./docs\", structure 指定 Readme、Summary、Glossary 和 Languages 对应的文件名。 styles 自定义页面样式， 默认情况下各generator对应的css文件 例： \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 例如要使 h1、h2 标签有下边框， 可以在 website.css 中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } title 电子书的书名，默认值是从 README 中提取出来的。在 GitBook.com 上，这个字段是预先填写的。 例： \"title\" : \"gitbook-templates\", plugins 插件及其配置在 book.json 中指定。有关详细信息。 自 3.0.0 版本开始，GitBook 可以使用主题。有关详细信息，请参阅 the theming section 。 变量 描述 plugins 要加载的插件列表 pluginsConfig 插件的配置 添加插件 \"plugins\": [ \"splitter\" ] 添加新插件之后需要运行 gitbook install 来安装新的插件 去除自带插件 Gitbook 默认带有 5 个插件： highlight search sharing font-settings livereload \"plugins\": [ \"-search\" ] structure 除了 root 属性之外，您可以指定 Readme，Summary，Glossary 和 Languages 的名称（而不是使用默认名称，如README.md）。这些文件必须在项目的根目录下（或 root 的根目录，如果你在 book.json 中配置了 root 属性）。不接受的路径，如：dir / MY_README.md。 变量 描述 structure.readme Readme 文件名（默认值是 README.md ） structure.summary Summary 文件名（默认值是 SUMMARY.md ） structure.glossary Glossary 文件名（默认值是 GLOSSARY.md ） structure.languages Languages 文件名（默认值是 LANGS.md ） pdf 可以使用 book.json 中的一组选项来定制PDF输出： Variable Description pdf.pageNumbers 将页码添加到每个页面的底部（默认为 true） pdf.fontSize 基本字体大小（默认是 12） pdf.fontFamily 基本字体样式（默认是 Arial） pdf.paperSize 页面尺寸，选项有： 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter' （默认值是 a4） pdf.margin.top 上边界（默认值是 56） pdf.margin.bottom 下边界（默认值是 56） pdf.margin.right 右边界（默认值是 62） pdf.margin.left 左边界（默认值是 62） Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 11:16:33 "},"basics/deploy.html":{"url":"basics/deploy.html","title":"交互","keywords":"","body":"Gitbook 部署 托管到 gitbook.com GitBook.com 是使用 GitBook 格式创建和托管图书的在线平台。它提供托管，协作功能和易于使用的编辑器。 创建新书 如下图所示，根据个人需求，选择一个模板创建你的电子书。 设置书的基本信息 clone 到本地 Gitbook.com 会为每本书创建一个 git 仓库。 如下图所示，拷贝 git 地址，然后 git clone 到本地。 发布 在本地按照 Gitbook 规范编辑电子书，然后 git push 到 Gitbook 的远程仓库。 默认访问地址是：https://用户名.gitbooks.io/项目名/content/ 例如：我的用户名为 dunwu，一个电子书项目名为 test，则访问路径是： https://dunwu.gitbooks.io/test/content/ 当然，如果你有自己的域名，也可以设置 Domains 选项，来指定访问路径为你的域。 托管到 Github 如果你不希望使用 Gitbook 的仓库，而是想直接使用 Github 的仓库，也是可以的。 首先，你需要绑定你的 Github 账号。最简单的方式当然就是登录 Gitbook.com 时使用 Github 账号登录方式了。否则，你也可以在 Account Settings 中的 Github 设置选项中去进行绑定。 绑定了 Github 账号后，你可以在新建电子书时，选择从一个指定的 Github 仓库导入电子书项目。参考下图： 只要你指定的 Github 仓库中的文档内容符合 Gitbook 规范，Gitbook 就会自动根据你的每次更新去构建生成电子书网站。 默认访问地址是： https://Github用户名.gitbooks.io/Github 仓库/content/ 例如：我的用户名为 dunwu，Github 仓库名为 gitbook-templates，则访问路径是： https://dunwu.gitbooks.io/gitbook-templates/content/ 托管到 Github Pages 也许你以前也了解 Github 的一个功能： GitHub Pages 。它允许用户在 GitHub 仓库托管你的个人、组织或项目的静态页面（自动识别 html、css、javascript）。 建立 xxx.github.io 仓库 要使用这个特性，首先，你必须建立一个严格遵循以下命名要求的仓库：Github账号名.github.io举例，我的 Github 账号为 dunwu，则这个仓库应该叫 dunwu.github.io。通常，这个仓库被用来作为个人或组织的博客。 建立 gh-pages 分支 完成第1步后，在任意一个 Github 仓库中建立一个名为 gh-pages 的分支。只要 gh-pages 中的内容符合一个静态站点要求，就可以在如下地址中进行访问：https://Github用户名.gitbooks.io/Github 仓库 。例如：我的一个 Github 仓库名为 react-notes，则访问路径是：https://dunwu.github.io/react-notes 自动化发布到 gh-pages 如果每次都手动 git push 到远程 gh-pages 分支，略有点麻烦。 怎么实现自动化发布呢？ 有两种方法： 使用 gh-pages 插件 如果你了解 Nodejs，那么最简单的发布方式就是使用 gh-pages 插件。 先在本地安装插件 $ npm i -D gh-pages 然后，在 package.json 文件中添加脚本命令： 如下：-d 命令参数后面是要发布的静态站点内容的目录 \"scripts\": { \"deploy\": \"gh-pages -d build\" }, 脚本 写一个执行 git 命令的脚本就搞定了。 下面的脚本无论是在 bat 或 sh 脚本中都可以执行。 cd build git init git checkout -b gh-pages git add . git commit -am \"Update\" git push git@github.com:dunwu/gitbook-templates gh-pages --force\" Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 11:16:33 "},"advanced/plugins.html":{"url":"advanced/plugins.html","title":"云雾","keywords":"","body":"GitBook 插件 记录一些实用的插件, 如果要指定插件的版本可以使用 plugin@0.3.1。下面的插件在 GitBook 的 3.2.2 版本中可以正常工作，因为一些插件可能不会随着 GitBook 版本的升级而升级，即下面的插件可能不适用高版本的 GitBook，所以这里指定了 GitBook 的版本。另外本文记录的插件在 Linux 下都是可以正确工作的，windows 系统没有测试。这里只是列举了一部分插件，如果有其它的需求，可以到 插件官网 区搜索相关插件。 Ace 插件地址 使 GitBook 支持ace 。默认情况下，line-height 为 1，会使代码显得比较挤，而作者好像没提供修改行高的选项，如果需要修改行高，可以到 node_modules -> github-plugin-ace -> assets -> ace.js 中加入下面两行代码 (30 行左右的位置)： editor.container.style.lineHeight = 1.25; editor.renderer.updateFontSize(); 不过上面的做法有个问题就是，每次使用 gitbook install 安装新的插件之后，代码又会重置为原来的样子。另外可以在 website.css 中加入下面的 css 代码来指定 ace 字体的大小 .aceCode { font-size: 14px !important; } 使用插件： \"plugins\": [ \"ace\" ] 使用示例: // This is a hello world program for C. #include int main(){ printf(\"Hello World!\"); return 1; } Advanced Emoji 支持emoji表情 emoij表情列表 插件地址 { \"plugins\" : [\"advanced-emoji\"] } 使用示例： ​:bowtie: Anchors 添加 Github 风格的锚点样式 插件地址 { \"plugins\" : [ \"anchors\" ] } Anchor-navigation-ex 添加Toc到侧边悬浮导航以及回到顶部按钮。需要注意以下两点： 本插件只会提取 h[1-3] 标签作为悬浮导航 只有按照以下顺序嵌套才会被提取# h1 ## h2 ### h3 必须要以 h1 开始，直接写 h2 不会被提取 ## h2 插件地址 { \"plugins\": [ \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"showLevel\": false, \"associatedWithSummary\": true, \"isRewritePageTitle\": false, \"float\": { \"showLevelIcon\": false, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" }, \"pageTop\": { \"showLevelIcon\": false, \"level1Icon\": \"fa fa-hand-o-right\", \"level2Icon\": \"fa fa-hand-o-right\", \"level3Icon\": \"fa fa-hand-o-right\" } }, } } Disqus 添加disqus评论 插件地址 { \"plugins\": [\"disqus\"], \"pluginsConfig\": { \"disqus\": { \"shortName\": \"XXXXXXX\" } } } 使用YAML前端，可以禁用特定页面的Disqus注释： --- disqus: false --- # My Page without disqus 默认情况下，Disqus在创建线程时使用窗口URL作为主标识符。您可以在页面的YAML前端设置自定义标识符： --- disqus: identifier: \"some-identifier\" --- Edit Link 这个插件在每个页面上添加“编辑此页面”链接。 插件地址 { \"plugins\": [\"edit-link\"], \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/USER/REPO/edit/BRANCH\", \"label\": \"Edit This Page\" } } } Emphasize 为文字加上底纹 插件地址 { \"plugins\": [\"emphasize\"] } 使用示例: This text is highlighted ! This text is highlighted with markdown! This text is highlighted in green! This text is highlighted in red! This text is highlighted with a custom color! Expandable-chapters-small 对可扩展章节插件进行微小的更改，以使用较小的箭头。 插件地址 { plugins: [\"expandable-chapters-small\"] } Favicon 该插件为您的网站添加了一个图标和 Apple Touch 图标。 插件地址 { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\", \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } Github 显示一个跳转到你的 github 地址的链接。 插件地址 { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/your/repo\" } } } Include Codeblock 使用代码块的格式显示所包含文件的内容. 该文件必须存在。插件提供了一些配置，可以区插件官网查看。如果同时使用 ace 和本插件，本插件要在 ace 插件前面加载。 插件地址 { \"plugins\": [ \"include-codeblock\" ], \"pluginsConfig\": { \"include-codeblock\": { \"template\": \"ace\", \"unindent\": \"true\", \"theme\": \"monokai\" } } } 使用示例: /* CSS for website */ h1, h2 { border-bottom: 1px solid #EFEAEA; padding-bottom: 3px; } .markdown-section > :first-child { margin-top: 0 !important; } .page-wrapper { margin-top: -1.275em; } .book .book-body .page-wrapper .page-inner section.normal { min-height: 350px; margin-bottom: 30px; } .book .book-body .page-wrapper .page-inner section.normal hr { height: 0px; padding: 0; margin: 1.7em 0; overflow: hidden; background-color: #e7e7e7; border-bottom: 1px dotted #e7e7e7; } .video-js { width: 100%; height: 100%; } pre[class*=\"language-\"] { border: none; background-color: #f7f7f7; font-size: 1em; line-height: 1.2em; } .book .book-body .page-wrapper .page-inner section.normal { font-size: 16px; font-family: \"ubuntu\", \"Tahoma\", \"Microsoft YaHei\", arial, sans-serif; } .aceCode { font-size: 14px !important; } input[type=checkbox] { margin-left: -2em; } Local Video 使用Video.js 播放本地视频 插件地址 { \"plugins\": [ \"local-video\" ] } 使用示例：为了使视频可以自适应，我们指定视频的width为100%，并设置宽高比为16:9，如下面所示： {% raw %} To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video {% endraw %} 另外我们还要再配置下css，即在website.css中加入 .video-js { width: 100%; height: 100%; } To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video Prism 使用 Prism.js 为语法添加高亮显示，需要将 highlight 插件去掉。该插件自带的主题样式较少，可以再安装 prism-themes 插件，里面多提供了几种样式，具体的样式可以参考 这里，在设置样式时要注意设置 css 文件名，而不是样式名。 Prism 插件地址    prism-themes 插件地址 { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prism-themes/themes/prism-base16-ateliersulphurpool.light.css\" ] } } } 如果需要修改背景色、字体大小等，可以在 website.css 定义 pre[class*=\"language-\"] 类来修改，下面是一个示例： pre[class*=\"language-\"] { border: none; background-color: #f7f7f7; font-size: 1em; line-height: 1.2em; } Search Plus 支持中文搜索, 需要将默认的 search 和 lunr 插件去掉。 插件地址 { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } Sectionx 将页面分块显示，标签的 tag 最好是使用 b 标签，如果使用 h1-h6 可能会和其他插件冲突。 插件地址 { \"plugins\": [ \"sectionx\" ], \"pluginsConfig\": { \"sectionx\": { \"tag\": \"b\" } } } 使用示例 Insert markdown content here (you should start with h3 if you use heading). Simple-page-toc 自动生成本页的目录结构。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 插件地址 { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 使用方法: 在需要生成目录的地方加上 Sitemap-general 生成sitemap 插件地址 { \"plugins\": [\"sitemap-general\"], \"pluginsConfig\": { \"sitemap-general\": { \"prefix\": \"https://github.com/dunwu\" } } } Splitter 使侧边栏的宽度可以自由调节 插件地址 \"plugins\": [ \"splitter\" ] Sharing 分享当前页面, gitbook的默认插件, 使用下面方式来禁用 plugins: [\"-sharing\"] 配置: \"pluginsConfig\": { \"sharing\": { \"weibo\": true, \"facebook\": true, \"twitter\": true, \"google\": false, \"instapaper\": false, \"vk\": false, \"all\": [ \"facebook\", \"google\", \"twitter\", \"weibo\", \"instapaper\" ] } } Tbfed-pagefooter 为页面添加页脚 插件地址 \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy Zhang Peng.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } Todo 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type=checkbox]{ margin-left: -2em; } 插件地址 \"plugins\": [\"todo\"] 使用示例： [ ] write some articles [x] drink a cup of tea Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 11:16:33 "},"basics/generating-ebooks-and-pdfs.html":{"url":"basics/generating-ebooks-and-pdfs.html","title":"机制","keywords":"","body":"生成电子书 目录 GitBook 可以生成一个网站，但也可以输出内容作为电子书（ePub，Mobi，PDF）。 # Generate a PDF file $ gitbook pdf ./ ./mybook.pdf # Generate an ePub file $ gitbook epub ./ ./mybook.epub # Generate a Mobi file $ gitbook mobi ./ ./mybook.mobi 安装 ebook-convert ebook-convert 可以用来生成电子书（epub，mobi，pdf）。 GNU/Linux 安装 Calibre application. $ sudo aptitude install calibre 在一些 GNU / Linux 发行版中，节点被安装为 nodejs，您需要手动创建一个符号链接： $sudo ln -s /usr/bin/nodejs /usr/bin/node OS X 下载 Calibre application。将 calibre.app 移动到应用程序文件夹后，创建一个符号链接到 ebook-convert 工具： $ sudo ln -s ~/Applications/calibre.app/Contents/MacOS/ebook-convert /usr/bin 您可以使用 $PATH 中的任何目录替换 /usr/bin 。 封面 封面用于所有电子书格式。您可以自己提供一个，也可以使用 autocover plugin 生成一个。 要提供封面，请将 cover.jpg 文件放在书本的根目录下。添加一个 cover_small.jpg 将指定一个较小版本的封面。封面应为 JPEG 文件。 好的封面应该遵守以下准则： cover.jpg 的尺寸为 1800x2360 像素，cover_small.jpg 为 200x262 没有边界 清晰可见的书名 任何重要的文字应该在小版本中可见 Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 11:16:33 "},"appendix/resources.html":{"url":"appendix/resources.html","title":"资源","keywords":"","body":"资源 官方资源 Gitbook Github Gitbook 官网 Gitbook Toolchain 文档 Gitbook 帮助中心 教程资源 gitbook-use by zhangjikai 工具 Gitbook 编辑器 Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 11:16:33 "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"术语","keywords":"","body":"GitBook GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。 Markdown Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 Copyright SantyPilot Team 2024 all right reserved，powered by Gitbook文件最近一次修订时间： 2023-12-30 11:16:33 "}}